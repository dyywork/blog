const e=JSON.parse('{"key":"v-330a37ea","path":"/document/react/hook.html","title":"hooks","lang":"zh-CN","frontmatter":{"date":"2022-08-19T00:00:00.000Z","author":"Mr.Ding","category":["React","Hooks"],"tag":["useState","useEffect"],"sticky":1,"star":1,"description":"hooks hooks的使用 为什么要用Hook? 1.在组件之间复用状态逻辑很难 Hook 使你在无需修改组件结构的情况下复用状态逻辑。 2.复杂组件变得难以理解 Hook 将组件中相互关联的部分拆分成更小的函数（比如设置订阅或请求数据），而并非强制按照生命周期划分。你还可以使用 reducer 来管理组件的内部状态，使其更加可预测。","head":[["meta",{"property":"og:url","content":"https://dyywork.github.io/blog/document/react/hook.html"}],["meta",{"property":"og:site_name","content":"莫名点"}],["meta",{"property":"og:title","content":"hooks"}],["meta",{"property":"og:description","content":"hooks hooks的使用 为什么要用Hook? 1.在组件之间复用状态逻辑很难 Hook 使你在无需修改组件结构的情况下复用状态逻辑。 2.复杂组件变得难以理解 Hook 将组件中相互关联的部分拆分成更小的函数（比如设置订阅或请求数据），而并非强制按照生命周期划分。你还可以使用 reducer 来管理组件的内部状态，使其更加可预测。"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2022-09-06T01:55:04.000Z"}],["meta",{"property":"article:author","content":"Mr.Ding"}],["meta",{"property":"article:tag","content":"useState"}],["meta",{"property":"article:tag","content":"useEffect"}],["meta",{"property":"article:published_time","content":"2022-08-19T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2022-09-06T01:55:04.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"hooks\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2022-08-19T00:00:00.000Z\\",\\"dateModified\\":\\"2022-09-06T01:55:04.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"Mr.Ding\\"}]}"]]},"headers":[{"level":2,"title":"hooks的使用","slug":"hooks的使用","link":"#hooks的使用","children":[]},{"level":2,"title":"useState","slug":"usestate","link":"#usestate","children":[]},{"level":2,"title":"useEffect","slug":"useeffect","link":"#useeffect","children":[{"level":3,"title":"1.useEffect 介绍","slug":"_1-useeffect-介绍","link":"#_1-useeffect-介绍","children":[]},{"level":3,"title":"2.需要清除的 effect","slug":"_2-需要清除的-effect","link":"#_2-需要清除的-effect","children":[]}]},{"level":2,"title":"Hook 规则","slug":"hook-规则","link":"#hook-规则","children":[]},{"level":2,"title":"自定义Hook","slug":"自定义hook","link":"#自定义hook","children":[]}],"git":{"createdTime":1661481185000,"updatedTime":1662429304000,"contributors":[{"name":"dingyongya","email":"yahya_dyy@163.com","commits":6}]},"readingTime":{"minutes":4.46,"words":1338},"filePathRelative":"document/react/hook.md","localizedDate":"2022年8月19日","excerpt":"<h1> hooks</h1>\\n<h2> hooks的使用</h2>\\n<h4 style=\\"color: red\\">为什么要用Hook?</h4> <br>\\n1.在组件之间复用状态逻辑很难\\n<ul>\\n<li><code>Hook</code> 使你在无需修改组件结构的情况下复用状态逻辑。</li>\\n</ul>\\n<p>2.复杂组件变得难以理解</p>\\n<ul>\\n<li><code>Hook</code> 将组件中<code>相互关联</code>的部分<code>拆分</code>成更小的函数（比如设置订阅或请求数据），而并非强制按照生命周期划分。你还可以使用 <code>reducer</code> 来管理组件的内部状态，使其更加可预测。</li>\\n</ul>","autoDesc":true}');export{e as data};
