const n=JSON.parse('{"key":"v-400a1522","path":"/document/js/Object.html","title":"面向对象","lang":"zh-CN","frontmatter":{"date":"2022-01-12T00:00:00.000Z","category":["javascript"],"tag":["Object","面向对象"],"description":"面向对象 提示 面向对象注重于抽象事物，而面向过程注重于叙述事物。 面向对象逻辑清晰有条理，而面向过程比较方面。 JS 通过函数和原型，模拟了传统面向对象编程中类的概念实现了面向对象的编程模式。 面向对象的变成思想，主要为了实现3件事， 封装、继承、多态。 1.封装 // 一个例子 function CreateObject(name) { // CreateObject 为构造函数 this.name = name; this.eat = function () { console.log(this.name + \\" eat something\\"); }; } let objA = new CreateObject(\\"A\\"); // 为构造函数的实例 let objB = new CreateObject(\\"B\\"); // 为构造函数的实例","head":[["meta",{"property":"og:url","content":"https://dyywork.github.io/blog/document/js/Object.html"}],["meta",{"property":"og:site_name","content":"莫名点"}],["meta",{"property":"og:title","content":"面向对象"}],["meta",{"property":"og:description","content":"面向对象 提示 面向对象注重于抽象事物，而面向过程注重于叙述事物。 面向对象逻辑清晰有条理，而面向过程比较方面。 JS 通过函数和原型，模拟了传统面向对象编程中类的概念实现了面向对象的编程模式。 面向对象的变成思想，主要为了实现3件事， 封装、继承、多态。 1.封装 // 一个例子 function CreateObject(name) { // CreateObject 为构造函数 this.name = name; this.eat = function () { console.log(this.name + \\" eat something\\"); }; } let objA = new CreateObject(\\"A\\"); // 为构造函数的实例 let objB = new CreateObject(\\"B\\"); // 为构造函数的实例"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-02-04T09:23:02.000Z"}],["meta",{"property":"article:author","content":"Mr.Ding"}],["meta",{"property":"article:tag","content":"Object"}],["meta",{"property":"article:tag","content":"面向对象"}],["meta",{"property":"article:published_time","content":"2022-01-12T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2024-02-04T09:23:02.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"面向对象\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2022-01-12T00:00:00.000Z\\",\\"dateModified\\":\\"2024-02-04T09:23:02.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"Mr.Ding\\"}]}"]]},"headers":[{"level":2,"title":"1.封装","slug":"_1-封装","link":"#_1-封装","children":[{"level":3,"title":"1.new 做了那些操作","slug":"_1-new-做了那些操作","link":"#_1-new-做了那些操作","children":[]}]},{"level":2,"title":"2.继承","slug":"_2-继承","link":"#_2-继承","children":[{"level":3,"title":"1.类式继承","slug":"_1-类式继承","link":"#_1-类式继承","children":[]},{"level":3,"title":"2.构造函数继承","slug":"_2-构造函数继承","link":"#_2-构造函数继承","children":[]},{"level":3,"title":"3.组合式继承","slug":"_3-组合式继承","link":"#_3-组合式继承","children":[]},{"level":3,"title":"4.寄生组合式继承","slug":"_4-寄生组合式继承","link":"#_4-寄生组合式继承","children":[]}]},{"level":2,"title":"3.多态","slug":"_3-多态","link":"#_3-多态","children":[]}],"git":{"createdTime":1651835912000,"updatedTime":1707038582000,"contributors":[{"name":"dingyongya","email":"yahya_dyy@163.com","commits":12}]},"readingTime":{"minutes":2.71,"words":812},"filePathRelative":"document/js/Object.md","localizedDate":"2022年1月12日","excerpt":"<h1> 面向对象</h1>\\n<div class=\\"hint-container tip\\">\\n<p class=\\"hint-container-title\\">提示</p>\\n<ul>\\n<li>面向对象注重于抽象事物，而面向过程注重于叙述事物。</li>\\n<li>面向对象逻辑清晰有条理，而面向过程比较方面。</li>\\n<li>JS 通过函数和原型，模拟了传统面向对象编程中类的概念实现了面向对象的编程模式。</li>\\n<li>面向对象的变成思想，主要为了实现3件事， 封装、继承、多态。</li>\\n</ul>\\n</div>\\n<h2> 1.封装</h2>\\n<div class=\\"language-javascript line-numbers-mode\\" data-ext=\\"js\\"><pre class=\\"language-javascript\\"><code><span class=\\"token comment\\">// 一个例子</span>\\n<span class=\\"token keyword\\">function</span> <span class=\\"token function\\">CreateObject</span><span class=\\"token punctuation\\">(</span><span class=\\"token parameter\\">name</span><span class=\\"token punctuation\\">)</span> <span class=\\"token punctuation\\">{</span>\\n  <span class=\\"token comment\\">// CreateObject 为构造函数</span>\\n  <span class=\\"token keyword\\">this</span><span class=\\"token punctuation\\">.</span>name <span class=\\"token operator\\">=</span> name<span class=\\"token punctuation\\">;</span>\\n  <span class=\\"token keyword\\">this</span><span class=\\"token punctuation\\">.</span><span class=\\"token function-variable function\\">eat</span> <span class=\\"token operator\\">=</span> <span class=\\"token keyword\\">function</span> <span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span> <span class=\\"token punctuation\\">{</span>\\n    console<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">log</span><span class=\\"token punctuation\\">(</span><span class=\\"token keyword\\">this</span><span class=\\"token punctuation\\">.</span>name <span class=\\"token operator\\">+</span> <span class=\\"token string\\">\\" eat something\\"</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n  <span class=\\"token punctuation\\">}</span><span class=\\"token punctuation\\">;</span>\\n<span class=\\"token punctuation\\">}</span>\\n<span class=\\"token keyword\\">let</span> objA <span class=\\"token operator\\">=</span> <span class=\\"token keyword\\">new</span> <span class=\\"token class-name\\">CreateObject</span><span class=\\"token punctuation\\">(</span><span class=\\"token string\\">\\"A\\"</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span> <span class=\\"token comment\\">// 为构造函数的实例</span>\\n<span class=\\"token keyword\\">let</span> objB <span class=\\"token operator\\">=</span> <span class=\\"token keyword\\">new</span> <span class=\\"token class-name\\">CreateObject</span><span class=\\"token punctuation\\">(</span><span class=\\"token string\\">\\"B\\"</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span> <span class=\\"token comment\\">// 为构造函数的实例</span>\\n</code></pre><div class=\\"line-numbers\\" aria-hidden=\\"true\\"><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div></div></div>","autoDesc":true}');export{n as data};
