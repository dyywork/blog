const e=JSON.parse('{"key":"v-38047439","path":"/document/js/designModel.html","title":"设计模式","lang":"zh-CN","frontmatter":{"date":"2022-11-18T00:00:00.000Z","category":["javascript"],"tag":["闭包","设计模式"],"description":"设计模式 单例模式 相关信息 单例模式：保证一个类且只有一个实例，并提供一个访问它的全局访问点 思路：利用js的作用域，形成闭包，从而可以创建私有变量（instance），然后将创建的实例赋予这个私有变量（instance）。每当想创建这个类的实例时，先判断私有变量（instance）是否已经引用了存在的实例 如果没有引用，即这个类没有实例，就创建一个实例，然后将其赋值给私有变量（instance）；如果已经引用。即已存在了该类的实例，就无需在创建，直接使用私有变量（instance）","head":[["meta",{"property":"og:url","content":"https://dyywork.github.io/blog/document/js/designModel.html"}],["meta",{"property":"og:site_name","content":"莫名点"}],["meta",{"property":"og:title","content":"设计模式"}],["meta",{"property":"og:description","content":"设计模式 单例模式 相关信息 单例模式：保证一个类且只有一个实例，并提供一个访问它的全局访问点 思路：利用js的作用域，形成闭包，从而可以创建私有变量（instance），然后将创建的实例赋予这个私有变量（instance）。每当想创建这个类的实例时，先判断私有变量（instance）是否已经引用了存在的实例 如果没有引用，即这个类没有实例，就创建一个实例，然后将其赋值给私有变量（instance）；如果已经引用。即已存在了该类的实例，就无需在创建，直接使用私有变量（instance）"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:image","content":"https://dyywork.github.io/blog/"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-02-04T09:23:02.000Z"}],["meta",{"name":"twitter:card","content":"summary_large_image"}],["meta",{"name":"twitter:image:alt","content":"设计模式"}],["meta",{"property":"article:author","content":"Mr.Ding"}],["meta",{"property":"article:tag","content":"闭包"}],["meta",{"property":"article:tag","content":"设计模式"}],["meta",{"property":"article:published_time","content":"2022-11-18T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2024-02-04T09:23:02.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"设计模式\\",\\"image\\":[\\"https://dyywork.github.io/blog/\\"],\\"datePublished\\":\\"2022-11-18T00:00:00.000Z\\",\\"dateModified\\":\\"2024-02-04T09:23:02.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"Mr.Ding\\"}]}"]]},"headers":[{"level":2,"title":"单例模式","slug":"单例模式","link":"#单例模式","children":[]},{"level":2,"title":"工厂模式","slug":"工厂模式","link":"#工厂模式","children":[]},{"level":2,"title":"构造函数模式","slug":"构造函数模式","link":"#构造函数模式","children":[]},{"level":2,"title":"原型模式","slug":"原型模式","link":"#原型模式","children":[]},{"level":2,"title":"组合使用构造函数模式和原型模式","slug":"组合使用构造函数模式和原型模式","link":"#组合使用构造函数模式和原型模式","children":[]},{"level":2,"title":"动态原型模式","slug":"动态原型模式","link":"#动态原型模式","children":[]},{"level":2,"title":"链模式","slug":"链模式","link":"#链模式","children":[]},{"level":2,"title":"委托模式","slug":"委托模式","link":"#委托模式","children":[]},{"level":2,"title":"数据访问对象模式","slug":"数据访问对象模式","link":"#数据访问对象模式","children":[]},{"level":2,"title":"等待者模式","slug":"等待者模式","link":"#等待者模式","children":[]},{"level":2,"title":"MVC模式","slug":"mvc模式","link":"#mvc模式","children":[]}],"git":{"createdTime":1668756983000,"updatedTime":1707038582000,"contributors":[{"name":"dingyongya","email":"yahya_dyy@163.com","commits":2}]},"readingTime":{"minutes":3.71,"words":1112},"filePathRelative":"document/js/designModel.md","localizedDate":"2022年11月18日","excerpt":"<h1> 设计模式</h1>\\n<h2> 单例模式</h2>\\n<div class=\\"hint-container info\\">\\n<p class=\\"hint-container-title\\">相关信息</p>\\n<p>单例模式：保证一个类且只有一个实例，并提供一个访问它的全局访问点<br>\\n思路：利用js的作用域，形成闭包，从而可以创建私有变量（instance），然后将创建的实例赋予这个私有变量（instance）。每当想创建这个类的实例时，先判断私有变量（instance）是否已经引用了存在的实例\\n如果没有引用，即这个类没有实例，就创建一个实例，然后将其赋值给私有变量（instance）；如果已经引用。即已存在了该类的实例，就无需在创建，直接使用私有变量（instance）</p>\\n</div>","autoDesc":true}');export{e as data};
