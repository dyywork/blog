import{_ as a}from"./plugin-vue_export-helper-DlAUqK2U.js";import{o as e,c as i,a as n}from"./app-BBT_y2dC.js";const s={},l=n(`<h1 id="事件循环" tabindex="-1"><a class="header-anchor" href="#事件循环" aria-hidden="true">#</a> 事件循环</h1><h2 id="进程" tabindex="-1"><a class="header-anchor" href="#进程" aria-hidden="true">#</a> 进程</h2><p>一个进程占据一个独立的内存空间</p><h2 id="线程" tabindex="-1"><a class="header-anchor" href="#线程" aria-hidden="true">#</a> 线程</h2><p>一个进程中会有多个线程</p><h2 id="浏览器的三大进程" tabindex="-1"><a class="header-anchor" href="#浏览器的三大进程" aria-hidden="true">#</a> 浏览器的三大进程</h2><ol><li>浏览器进程</li><li>网络进程</li><li>渲染进程(一个标签一个渲染进程) <code>前端html css js 都是在这个进程里面执行</code></li></ol><h3 id="渲染进程" tabindex="-1"><a class="header-anchor" href="#渲染进程" aria-hidden="true">#</a> 渲染进程</h3><ul><li>解析HTML</li><li>解析CSS</li><li>计算样式</li><li>布局</li><li>处理同层</li><li>每秒把页面画60次</li><li>执行全局js代码</li><li>执行事件处理函数</li><li>执行计时器的回调函数</li><li>等等......</li></ul><h4 id="异步" tabindex="-1"><a class="header-anchor" href="#异步" aria-hidden="true">#</a> 异步？</h4><p>JS 是一门单线程语言，这是因为它运行在浏览器的渲染主线程中，而渲染主线程只有一个。<br> 而渲染主线程承担着诸多方面的工作，渲染页面、执行JS、都在其中<br> 如果使用同步的方式，就极有可能导致主线程尝试阻塞，从而导致消息队列(事件队列)中的很多其他任务无法得到执行，这样一来，一方面会导致繁忙的主线程白白 消耗时间，另一方面导致页面无法及时更新，给用户造成卡死现象。<br> 所以浏览器采用异步的方式来避免。具体做法是当某些任务发生时，比如计时器、网络、事件监听、主线程将<code>回调函数包装成任务</code>， 加入到消息队列的末尾排队，等待主线程调度执行，在这种异步模式下，浏览器永不阻塞，从而最大限度的保证了单线程的流畅运行。</p><h4 id="任务有优先级吗" tabindex="-1"><a class="header-anchor" href="#任务有优先级吗" aria-hidden="true">#</a> 任务有优先级吗？</h4><p>任务没有优先级，在消息队列中先进先出 但 <code>消息队列是有优先级的</code></p><p>根据W3C 的最新解释</p><ul><li>每个任务都有一个任务类型，同一个类型的任务必须在一个队列，不同类型的任务可以分属不同的队列。在一次事件循环中，浏览器可以根据实际情况从不同的队列中取出任务执行。</li><li>浏览器必须准备好一个微队列，微队列中的任务<code>优先所有其他任务执行</code> [https://html.spec.whatwg.org/multipage/webappapis.html#perform-a-microtask-checkpoint]</li></ul><h4 id="目前chrome-的实现中-至少包含下面的队列" tabindex="-1"><a class="header-anchor" href="#目前chrome-的实现中-至少包含下面的队列" aria-hidden="true">#</a> 目前chrome 的实现中，至少包含下面的队列</h4><ul><li>延时队列：用于存放计时器到达后的回调任务，优先级【中】</li><li>交互队列：用于存放用户操作后产生的事件处理任务，优先级【高】</li><li>微队列：用于存放需要最快执行的任务，优先级【高】</li></ul><p>添加到微队列的主要方式是使用 Promise, MutationObserver</p><p>例如</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// 立即把函数添加到微队列</span>
Promise<span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span>函数<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="阐述一下js-的事件循环" tabindex="-1"><a class="header-anchor" href="#阐述一下js-的事件循环" aria-hidden="true">#</a> 阐述一下JS 的事件循环</h3><p>事件循环又叫消息循环，是浏览器渲染主线程的工作方式。<br> 在Chrome 的源码中，他开启一个不会结束的for循环，每次循环从消息队列中取出第一个任务执行，而其他线程只需要在合适的时候将任务加入到队列末尾即可。<br> 过去把消息队列简单的分为宏队列和微队列，这种说法目前已无法满足复杂的浏览器环境，取而代之的是一种更加灵活多变的处理方式。<br> 根据W3C官方解释，每个任务有不同类型，同类型的任务必须在同一个队列，不同的任务可以属于不同的队列，不同的任务队列有不同的优先级， 再一次事件循环中，有浏览器自行决定取哪一个队列的任务，但浏览器必须有一个微队列，微队列的任务一定具有最高的优先级，必须优先调度执行。</p><h3 id="js-中的计时器内做到精确的计时吗-为什么" tabindex="-1"><a class="header-anchor" href="#js-中的计时器内做到精确的计时吗-为什么" aria-hidden="true">#</a> JS 中的计时器内做到精确的计时吗？为什么？</h3><p>不行，因为</p><ol><li>计算机硬件没有原子钟，无法做到精确计时；</li><li>操作系统的计时函数本身就有少量偏差，由于js的计时器最终调用的是操作系统的函数，也就携带了这些偏差；</li><li>按照W3C的标准，浏览器实现计时器时，如果嵌套层级超过5层，则会带有4毫秒的最少时间，这样在计时时间少于4毫秒又带来了偏差</li><li>受事件循环的影响，计时器的回调函数只能在主线程空闲时运行，因此带来了偏差。</li></ol>`,25),r=[l];function t(c,d){return e(),i("div",null,r)}const p=a(s,[["render",t],["__file","eventLoop.html.vue"]]);export{p as default};
