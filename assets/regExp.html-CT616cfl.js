import{_ as n}from"./plugin-vue_export-helper-DlAUqK2U.js";import{o as s,c as a,a as t}from"./app-D0ekw1Eq.js";const e={},p=t(`<h1 id="正则表达式" tabindex="-1"><a class="header-anchor" href="#正则表达式"><span>正则表达式</span></a></h1><div class="hint-container info"><p class="hint-container-title">正则定义</p><p>正则表达式是描述字符模式的对象。<br> 正则表达式用于对字符串模式匹配及检索替换，是对字符串执行模式匹配的强大工具。</p></div><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">const</span> regExp <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">RegExp</span><span class="token punctuation">(</span><span class="token string">&quot;\\\\w+&quot;</span><span class="token punctuation">)</span>
<span class="token keyword">const</span> regExp <span class="token operator">=</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">\\w+</span><span class="token regex-delimiter">/</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="修饰符" tabindex="-1"><a class="header-anchor" href="#修饰符"><span>修饰符</span></a></h2><table><thead><tr><th style="text-align:left;">修饰符</th><th>描述</th></tr></thead><tbody><tr><td style="text-align:left;">i</td><td>不区分大小写的匹配</td></tr><tr><td style="text-align:left;">g</td><td>全局匹配（查找所有匹配而非找到第一个匹配后停止）</td></tr><tr><td style="text-align:left;">m</td><td>执行多行匹配</td></tr></tbody></table><div class="hint-container tip"><p class="hint-container-title">修饰符使用</p><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code>  <span class="token keyword">const</span> str <span class="token operator">=</span> <span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">This IS RegExp Object!</span><span class="token template-punctuation string">\`</span></span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>str<span class="token punctuation">.</span><span class="token function">match</span><span class="token punctuation">(</span><span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">is</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">// [&#39;is&#39;, index: 2, input: &#39;This\\nIS RegExp Object!&#39;, groups: undefined]</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>str<span class="token punctuation">.</span><span class="token function">match</span><span class="token punctuation">(</span><span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">is</span><span class="token regex-delimiter">/</span><span class="token regex-flags">g</span></span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">// [&#39;is&#39;]</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>str<span class="token punctuation">.</span><span class="token function">match</span><span class="token punctuation">(</span><span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">is</span><span class="token regex-delimiter">/</span><span class="token regex-flags">gi</span></span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">// [&#39;is&#39;, &#39;IS&#39;]</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>str<span class="token punctuation">.</span><span class="token function">match</span><span class="token punctuation">(</span><span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">is</span><span class="token regex-delimiter">/</span><span class="token regex-flags">gim</span></span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">// [&#39;is&#39;, &#39;IS&#39;]</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></div><h2 id="方括号" tabindex="-1"><a class="header-anchor" href="#方括号"><span>方括号</span></a></h2><table><thead><tr><th style="text-align:left;">表达式</th><th>描述</th></tr></thead><tbody><tr><td style="text-align:left;">[abc]</td><td>查找方括号内的字符串</td></tr><tr><td style="text-align:left;">[^abc]</td><td>查找不在方括号内的字符串</td></tr><tr><td style="text-align:left;">[0-9]</td><td>查找任何0-9的数字</td></tr><tr><td style="text-align:left;">[a-z]</td><td>查找小写a-z的的字符</td></tr><tr><td style="text-align:left;">[A-Z]</td><td>查找大写A-Z的的字符</td></tr><tr><td style="text-align:left;">(12|34|56)</td><td>查找任何指定的选项</td></tr></tbody></table><div class="hint-container tip"><p class="hint-container-title">方括号应用</p><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">const</span> str <span class="token operator">=</span> <span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">Thi12s IS9 RegExp123 Object456!</span><span class="token template-punctuation string">\`</span></span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>str<span class="token punctuation">.</span><span class="token function">match</span><span class="token punctuation">(</span><span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">[is]</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">// [&#39;i&#39;, index: 2, input: &#39;Thi12s IS9 RegExp123 Object456!&#39;, groups: undefined]</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>str<span class="token punctuation">.</span><span class="token function">match</span><span class="token punctuation">(</span><span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">[is]</span><span class="token regex-delimiter">/</span><span class="token regex-flags">g</span></span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">// [&#39;i&#39;, &#39;s&#39;]</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>str<span class="token punctuation">.</span><span class="token function">match</span><span class="token punctuation">(</span><span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">[is]</span><span class="token regex-delimiter">/</span><span class="token regex-flags">gi</span></span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">// [&#39;i&#39;, &#39;s&#39;, &#39;I&#39;, &#39;S&#39;]</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>str<span class="token punctuation">.</span><span class="token function">match</span><span class="token punctuation">(</span><span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">[^is]</span><span class="token regex-delimiter">/</span><span class="token regex-flags">gi</span></span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">// [&#39;T&#39;, &#39;h&#39;, &#39;1&#39;, &#39;2&#39;, &#39; &#39;, &#39;9&#39;, &#39; &#39;, &#39;R&#39;, &#39;e&#39;, &#39;g&#39;, &#39;E&#39;, &#39;x&#39;, &#39;p&#39;, &#39;1&#39;, &#39;2&#39;, &#39;3&#39;, &#39; &#39;, &#39;O&#39;, &#39;b&#39;, &#39;j&#39;, &#39;e&#39;, &#39;c&#39;, &#39;t&#39;, &#39;4&#39;, &#39;5&#39;, &#39;6&#39;, &#39;!&#39;]</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>str<span class="token punctuation">.</span><span class="token function">match</span><span class="token punctuation">(</span><span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">[0-9]</span><span class="token regex-delimiter">/</span><span class="token regex-flags">g</span></span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">// [&#39;1&#39;, &#39;2&#39;, &#39;9&#39;, &#39;1&#39;, &#39;2&#39;, &#39;3&#39;, &#39;4&#39;, &#39;5&#39;, &#39;6&#39;]</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></div><h2 id="regexp-对象的方法" tabindex="-1"><a class="header-anchor" href="#regexp-对象的方法"><span>RegExp 对象的方法</span></a></h2><table><thead><tr><th style="text-align:left;">表达式</th><th>描述</th></tr></thead><tbody><tr><td style="text-align:left;">exec</td><td>检索字符串中指定的值。返回找到的值，并确定其位置。</td></tr><tr><td style="text-align:left;">test</td><td>检索字符串中指定的值。返回 true 或 false。</td></tr><tr><td style="text-align:left;">toString</td><td>返回正则表达式的字符串。</td></tr></tbody></table><h2 id="支持正则表达式的-string-对象的方法" tabindex="-1"><a class="header-anchor" href="#支持正则表达式的-string-对象的方法"><span>支持正则表达式的 String 对象的方法</span></a></h2><table><thead><tr><th style="text-align:left;">表达式</th><th>描述</th></tr></thead><tbody><tr><td style="text-align:left;">search</td><td>检索与正则表达式相匹配的值。</td></tr><tr><td style="text-align:left;">match</td><td>找到一个或多个正则表达式的匹配</td></tr><tr><td style="text-align:left;">replace</td><td>替换与正则表达式匹配的子串。</td></tr><tr><td style="text-align:left;">split</td><td>把字符串分割为字符串数组。</td></tr></tbody></table>`,13),o=[p];function l(c,i){return s(),a("div",null,o)}const u=n(e,[["render",l],["__file","regExp.html.vue"]]),g=JSON.parse('{"path":"/document/regExp/regExp.html","title":"正则表达式","lang":"zh-CN","frontmatter":{"date":"2022-08-19T00:00:00.000Z","author":"Mr.Ding","category":["正则表达式"],"tag":["正则表达式"],"description":"正则表达式 正则定义 正则表达式是描述字符模式的对象。 正则表达式用于对字符串模式匹配及检索替换，是对字符串执行模式匹配的强大工具。 修饰符 修饰符使用 方括号 方括号应用 RegExp 对象的方法 支持正则表达式的 String 对象的方法","head":[["meta",{"property":"og:url","content":"https://dyywork.github.io/blog/document/regExp/regExp.html"}],["meta",{"property":"og:site_name","content":"莫名点"}],["meta",{"property":"og:title","content":"正则表达式"}],["meta",{"property":"og:description","content":"正则表达式 正则定义 正则表达式是描述字符模式的对象。 正则表达式用于对字符串模式匹配及检索替换，是对字符串执行模式匹配的强大工具。 修饰符 修饰符使用 方括号 方括号应用 RegExp 对象的方法 支持正则表达式的 String 对象的方法"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-04-28T02:38:38.000Z"}],["meta",{"property":"article:author","content":"Mr.Ding"}],["meta",{"property":"article:tag","content":"正则表达式"}],["meta",{"property":"article:published_time","content":"2022-08-19T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2024-04-28T02:38:38.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"正则表达式\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2022-08-19T00:00:00.000Z\\",\\"dateModified\\":\\"2024-04-28T02:38:38.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"Mr.Ding\\"}]}"]]},"headers":[{"level":2,"title":"修饰符","slug":"修饰符","link":"#修饰符","children":[]},{"level":2,"title":"方括号","slug":"方括号","link":"#方括号","children":[]},{"level":2,"title":"RegExp 对象的方法","slug":"regexp-对象的方法","link":"#regexp-对象的方法","children":[]},{"level":2,"title":"支持正则表达式的 String 对象的方法","slug":"支持正则表达式的-string-对象的方法","link":"#支持正则表达式的-string-对象的方法","children":[]}],"git":{"createdTime":1666599040000,"updatedTime":1714271918000,"contributors":[{"name":"dingyongya","email":"yahya_dyy@163.com","commits":4}]},"readingTime":{"minutes":1.64,"words":491},"filePathRelative":"document/regExp/regExp.md","localizedDate":"2022年8月19日","excerpt":"\\n<div class=\\"hint-container info\\">\\n<p class=\\"hint-container-title\\">正则定义</p>\\n<p>正则表达式是描述字符模式的对象。<br>\\n正则表达式用于对字符串模式匹配及检索替换，是对字符串执行模式匹配的强大工具。</p>\\n</div>\\n<div class=\\"language-javascript\\" data-ext=\\"js\\" data-title=\\"js\\"><pre class=\\"language-javascript\\"><code><span class=\\"token keyword\\">const</span> regExp <span class=\\"token operator\\">=</span> <span class=\\"token keyword\\">new</span> <span class=\\"token class-name\\">RegExp</span><span class=\\"token punctuation\\">(</span><span class=\\"token string\\">\\"\\\\\\\\w+\\"</span><span class=\\"token punctuation\\">)</span>\\n<span class=\\"token keyword\\">const</span> regExp <span class=\\"token operator\\">=</span> <span class=\\"token regex\\"><span class=\\"token regex-delimiter\\">/</span><span class=\\"token regex-source language-regex\\">\\\\w+</span><span class=\\"token regex-delimiter\\">/</span></span>\\n</code></pre></div>","autoDesc":true}');export{u as comp,g as data};
