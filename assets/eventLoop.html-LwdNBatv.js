import{_ as e}from"./plugin-vue_export-helper-x3n3nnut.js";import{o as a,c as i,a as r}from"./app-IXcY21L4.js";const l={},h=r('<h1 id="事件循环" tabindex="-1"><a class="header-anchor" href="#事件循环" aria-hidden="true">#</a> 事件循环</h1><h2 id="进程" tabindex="-1"><a class="header-anchor" href="#进程" aria-hidden="true">#</a> 进程</h2><p>一个进程占据一个独立的内存空间</p><h2 id="线程" tabindex="-1"><a class="header-anchor" href="#线程" aria-hidden="true">#</a> 线程</h2><p>一个进程中会有多个线程</p><h2 id="浏览器的三大进程" tabindex="-1"><a class="header-anchor" href="#浏览器的三大进程" aria-hidden="true">#</a> 浏览器的三大进程</h2><ol><li>浏览器进程</li><li>网络进程</li><li>渲染进程(一个标签一个渲染进程) <code>前端html css js 都是在这个进程里面执行</code></li></ol><h3 id="渲染进程" tabindex="-1"><a class="header-anchor" href="#渲染进程" aria-hidden="true">#</a> 渲染进程</h3><ul><li>解析HTML</li><li>解析CSS</li><li>计算样式</li><li>布局</li><li>处理同层</li><li>每秒把页面画60次</li><li>执行全局js代码</li><li>执行事件处理函数</li><li>执行计时器的回调函数</li><li>等等......</li></ul><h4 id="异步" tabindex="-1"><a class="header-anchor" href="#异步" aria-hidden="true">#</a> 异步？</h4><p>JS 是一门单线程语言，这是因为它运行在浏览器的渲染主线程中，而渲染主线程只有一个。<br> 而渲染主线程承担着诸多方面的工作，渲染页面、执行JS、都在其中<br> 如果使用同步的方式，就极有可能导致主线程尝试阻塞，从而导致消息队列(事件队列)中的很多其他任务无法得到执行，这样一来，一方面会导致繁忙的主线程白白 消耗时间，另一方面导致页面无法及时更新，给用户造成卡死现象。<br> 所以浏览器采用异步的方式来避免。具体做法是当某些任务发生时，比如计时器、网络、事件监听、主线程将<code>回调函数包装成任务</code>， 加入到消息队列的末尾排队，等待主线程调度执行，在这种异步模式下，浏览器永不阻塞，从而最大限度的保证了单线程的流畅运行。</p>',11),d=[h];function t(c,o){return a(),i("div",null,d)}const _=e(l,[["render",t],["__file","eventLoop.html.vue"]]);export{_ as default};
